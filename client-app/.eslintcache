[{"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\nav\\NavBar.tsx":"4","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\Home\\HomePage.tsx":"12","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsInfo.tsx":"15","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsChat.tsx":"16","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsHeader.tsx":"17","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsSideBar.tsx":"18","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"20","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"21","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"22","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"23","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"24","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"25","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\models\\activities.ts":"26","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"27","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"28","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\user\\LoginForm.tsx":"29","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"30"},{"size":930,"mtime":1611066881973,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":1602,"mtime":1611755803019,"results":"34","hashOfConfig":"32"},{"size":2150,"mtime":1611755765736,"results":"35","hashOfConfig":"32"},{"size":1083,"mtime":1611755800008,"results":"36","hashOfConfig":"32"},{"size":1119,"mtime":1611675272431,"results":"37","hashOfConfig":"32"},{"size":1651,"mtime":1611755403946,"results":"38","hashOfConfig":"32"},{"size":4928,"mtime":1611675312225,"results":"39","hashOfConfig":"32"},{"size":2253,"mtime":1611752215869,"results":"40","hashOfConfig":"32"},{"size":334,"mtime":1609939743121,"results":"41","hashOfConfig":"32"},{"size":5269,"mtime":1611749922276,"results":"42","hashOfConfig":"32"},{"size":1695,"mtime":1611752904449,"results":"43","hashOfConfig":"32"},{"size":298,"mtime":1610462032339,"results":"44","hashOfConfig":"32"},{"size":1556,"mtime":1611069859224,"results":"45","hashOfConfig":"32"},{"size":1723,"mtime":1611069868712,"results":"46","hashOfConfig":"32"},{"size":2386,"mtime":1610639445365,"results":"47","hashOfConfig":"32"},{"size":2114,"mtime":1611069891331,"results":"48","hashOfConfig":"32"},{"size":2401,"mtime":1610639494102,"results":"49","hashOfConfig":"32"},{"size":627,"mtime":1610818423068,"results":"50","hashOfConfig":"32"},{"size":686,"mtime":1610987369097,"results":"51","hashOfConfig":"32"},{"size":695,"mtime":1610987758676,"results":"52","hashOfConfig":"32"},{"size":826,"mtime":1611065961289,"results":"53","hashOfConfig":"32"},{"size":358,"mtime":1611066044934,"results":"54","hashOfConfig":"32"},{"size":1032,"mtime":1611163618053,"results":"55","hashOfConfig":"32"},{"size":360,"mtime":1611154494737,"results":"56","hashOfConfig":"32"},{"size":731,"mtime":1611156612995,"results":"57","hashOfConfig":"32"},{"size":619,"mtime":1611754420894,"results":"58","hashOfConfig":"32"},{"size":999,"mtime":1611755080683,"results":"59","hashOfConfig":"32"},{"size":2038,"mtime":1611753867896,"results":"60","hashOfConfig":"32"},{"size":541,"mtime":1611754641767,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"19d99hj",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\index.tsx",[],["129","130"],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\nav\\NavBar.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx",["131"],"import { observer } from 'mobx-react-lite'\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport ActivityList from './ActivityList'\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { loadActivities, loadingInitial } = rootStore.activityStore;\r\n\r\n    const { logout, user } = rootStore.userStore;\r\n\r\n    useEffect(() => {\r\n        loadActivities();\r\n    }, [loadActivities]);\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activities ...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <h2>Activity Filters</h2>\r\n                <h2>Wassup {user?.displayName}</h2>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx",["132"],"import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item, Label } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport ActivityStore from './../../../app/stores/activityStore';\r\nimport { ActivityListItem } from './ActivityListItem';\r\n\r\n\r\nconst ActivityList: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activitiesByDate } = rootStore.activityStore;\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue' >\r\n                        {group}\r\n                    </Label>\r\n\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n\r\n\r\n    )\r\n}\r\nexport default observer(ActivityList);\r\n","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetails.tsx",["133"],"import { observer } from 'mobx-react-lite'\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { LoadingComponent } from '../../../app/layout/LoadingComponent';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport ActivityStore from './../../../app/stores/activityStore';\r\nimport { ActivityDetailsChat } from './ActivityDetailsChat';\r\nimport ActivityDetailsHeader from './ActivityDetailsHeader';\r\nimport { ActivityDetailsInfo } from './ActivityDetailsInfo';\r\nimport { ActivityDetailsSideBar } from './ActivityDetailsSideBar';\r\n\r\ninterface DetailParams {\r\n    id: string\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({ match, history }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        loadActivity(match.params.id)\r\n    }, [loadActivity, match.params.id, history])\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n    if (!activity) return <h2>Activity not found</h2>;\r\n\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailsHeader activity={activity} />\r\n                <ActivityDetailsInfo activity={activity} />\r\n                <ActivityDetailsChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailsSideBar />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);\r\n","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\form\\ActivityForm.tsx",["134"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react'\r\nimport { ActivityFromValues } from '../../../app/models/activities'\r\nimport { v4 as uuid } from 'uuid';\r\nimport { observer } from 'mobx-react-lite'\r\nimport ActivityStore from './../../../app/stores/activityStore';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form as FinalForm, Field } from 'react-final-form'\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { SelectInput } from '../../../app/common/form/SelectInput';\r\nimport { category } from '../../../app/common/options/categoryOptions';\r\nimport { DateInput } from '../../../app/common/form/DateInput';\r\nimport { combineDateAndTime } from '../../../app/common/util/util';\r\nimport { combineValidators, composeValidators, hasLengthGreaterThan, isRequired } from 'revalidate';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nconst validate = combineValidators({\r\n    title: isRequired({ message: 'The event title is required' }),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n        isRequired('Description'),\r\n        hasLengthGreaterThan(4)({ message: 'Description need to be at least 5 characters' })\r\n    )(),\r\n    city: isRequired('City'),\r\n    venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time'),\r\n})\r\n\r\ninterface DetailParams {\r\n    id: string;\r\n}\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({ match, history }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { createActivity, editActivity, submitting, loadActivity } = rootStore.activityStore\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [activity, setActivity] = useState(new ActivityFromValues());\r\n\r\n    useEffect(() => {\r\n        if (match.params.id) {\r\n            setLoading(true);\r\n            loadActivity(match.params.id).then((activity) => {\r\n                setActivity(new ActivityFromValues(activity));\r\n            }).finally(() => {\r\n                setLoading(false);\r\n            });\r\n        }\r\n\r\n    }, [loadActivity, match.params.id]);\r\n\r\n    const handleFinalFormSubmit = (values: any) => {\r\n        const dateAndTime = combineDateAndTime(values.date, values.time);\r\n        const { date, time, ...activity } = values;\r\n        activity.date = dateAndTime;\r\n\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity)\r\n        } else {\r\n            editActivity(activity)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <Segment clearing >\r\n                    <FinalForm\r\n                        validate={validate}\r\n                        initialValues={activity}\r\n                        onSubmit={handleFinalFormSubmit}\r\n                        render={({ handleSubmit, invalid, pristine }) => (\r\n                            <Form onSubmit={handleSubmit} loading={loading}>\r\n                                <Field placeholder='Title' component={TextInput} name='title' value={activity.title} />\r\n                                <Field component={TextAreaInput} rows={3} name='description' placeholder='Description' value={activity.description} />\r\n                                <Field component={SelectInput} options={category} name='category' placeholder='Category' value={activity.category} />\r\n                                <Form.Group widths='equal'>\r\n                                    <Field component={DateInput} name='date' date={true} placeholder='Date' value={activity.date} />\r\n                                    <Field component={DateInput} name='time' time={true} placeholder='Time' value={activity.date} />\r\n                                </Form.Group>\r\n                                <Field component={TextInput} name='city' placeholder='City' value={activity.city} />\r\n                                <Field component={TextInput} name='venue' placeholder='Venue' value={activity.venue} />\r\n                                <Button loading={submitting} floated='right' positive type='submit' content='Submit' disabled={loading || invalid || pristine} />\r\n                                <Button onClick={activity.id\r\n                                    ? () => history.push(`/activities/${activity.id}`)\r\n                                    : () => history.push(`/activities`)\r\n                                } floated='right' type='button' content='Cancel' disabled={loading} />\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\api\\agent.ts",[],["135","136"],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["137","138"],"import { observable, action, makeObservable, computed, configure, runInAction } from \"mobx\";\r\nimport { createContext, SyntheticEvent } from \"react\";\r\nimport agent from \"../api/agent\";\r\nimport { history } from \"../..\";\r\nimport { IActivity } from \"../models/activities\";\r\nimport { toast } from \"react-toastify\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    rootStore: RootStore;\r\n    \r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n\r\n    }\r\n\r\n    @observable loadingInitial = false;\r\n    @observable activity: IActivity | null = null;\r\n    @observable submitting = false;\r\n    @observable activityRegistry = new Map();\r\n    @observable target = '';\r\n\r\n    @computed get activitiesByDate() {\r\n        console.log(this.groupActivitivtiesByDate(Array.from(this.activityRegistry.values())));\r\n        return this.groupActivitivtiesByDate(Array.from(this.activityRegistry.values()));\r\n    }\r\n\r\n    groupActivitivtiesByDate(activities: IActivity[]) {\r\n        const sortedActivities = activities.sort(\r\n            (a, b) => a.date.getTime() - b.date.getTime()\r\n        )\r\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\r\n            const date = activity.date.toISOString().split('T')[0];\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n            return activities;\r\n        }, {} as { [key: string]: IActivity[] }));\r\n    }\r\n\r\n    @action loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const activities = await agent.Activities.list();\r\n            runInAction(() => {\r\n                activities.forEach(activity => {\r\n                    activity.date = new Date(activity.date);\r\n                    this.activityRegistry.set(activity.id, activity);\r\n                });\r\n\r\n                this.loadingInitial = false;\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingInitial = false;\r\n            })\r\n            console.log(error);\r\n        };\r\n\r\n    }\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.activity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(() => {\r\n                    activity.date = new Date(activity.date);\r\n                    this.activity = activity;\r\n                    this.activityRegistry.set(activity.id, activity);   //to save in registry\r\n                    this.loadingInitial = false;\r\n                })\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    this.loadingInitial = false;\r\n                })\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n    getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\r\n        this.submitting = true;\r\n        this.target = event.currentTarget.name;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.submitting = false;\r\n                this.target = '';\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.target = '';\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action editActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.activity = activity;\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n                this.activityRegistry.set(activity.id, activity);\r\n            });\r\n            toast.error(\"Problem submitting data\");\r\n            console.log(error.response);\r\n\r\n        }\r\n    }\r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.submitting = false;\r\n            });\r\n            history.push(`/activities/${activity.id}`)\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.submitting = false;\r\n            });\r\n            toast.error(\"Problem submitting data\");\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @action cancelSelectedActivity = () => {\r\n        this.activity = null;\r\n    }\r\n\r\n}\r\n","C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\Home\\HomePage.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsInfo.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsChat.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsHeader.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\activities\\details\\ActivityDetailsSideBar.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\models\\activities.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\feature\\user\\LoginForm.tsx",[],"C:\\Users\\naisu\\Documents\\Udemy\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":12,"column":13,"nodeType":"145","messageId":"146","endLine":12,"endColumn":19},{"ruleId":"143","severity":1,"message":"147","line":5,"column":8,"nodeType":"145","messageId":"146","endLine":5,"endColumn":21},{"ruleId":"143","severity":1,"message":"147","line":7,"column":8,"nodeType":"145","messageId":"146","endLine":7,"endColumn":21},{"ruleId":"143","severity":1,"message":"147","line":6,"column":8,"nodeType":"145","messageId":"146","endLine":6,"endColumn":21},{"ruleId":"139","replacedBy":"148"},{"ruleId":"141","replacedBy":"149"},{"ruleId":"143","severity":1,"message":"150","line":1,"column":56,"nodeType":"145","messageId":"146","endLine":1,"endColumn":65},{"ruleId":"143","severity":1,"message":"151","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":23},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"@typescript-eslint/no-unused-vars","'logout' is assigned a value but never used.","Identifier","unusedVar","'ActivityStore' is defined but never used.",["152"],["153"],"'configure' is defined but never used.","'createContext' is defined but never used.","no-global-assign","no-unsafe-negation"]